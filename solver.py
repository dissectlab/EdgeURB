# Import PuLP modeler functions
import math

from pulp import *
import pandas as pd
import numpy as np

"""
number = 8
edge = 2

Y = np.array([
    [0.1564, 0.0464, 0.1715, 0.1715, 0.1411, 0.1257, 0.0464, 0.1411],
    [0.1564, 0.0464, 0.1715, 0.1715, 0.1411, 0.1257, 0.0464, 0.1411]
])

L = [[1.3112242575082698, 1.2082689897101766, 1.331384286025616, 1.331384286025616, 1.2916749163641579, 1.2730066093171064, 1.2082689897101766, 1.2916749163641579], [0.9678569802557889, 0.8607882927971238, 0.9869690002179311, 0.9869690002179311, 0.9491724414549106, 0.9311046265219742, 0.8607882927971238, 0.9491724414549106]]
I = [[-2.9143000000000003, -0.904515, -3.3042900000000004, -3.400961666666667, -2.5677000000000003, -2.4672, -0.92179, -2.6466000000000003], [-2.9143000000000003, -0.904515, -3.3042900000000004, -3.400961666666667, -2.5677000000000003, -2.4672, -0.92179, -2.6466000000000003]]
"""


def solver(L, I, number, edge):

    # A new LP problem
    prob = LpProblem("test1", LpMinimize)

    variable_names = [str(i) + str(j).zfill(3) for j in range(1, number + 1) for i in range(1, edge + 1)]
    variable_names.sort()
    print("Variable Indices:", variable_names)

    DV_variables = LpVariable.matrix("X", variable_names, cat="Continuous", lowBound=0, upBound=1.)
    allocation = np.array(DV_variables).reshape(edge, number)
    #print("Decision Variable/Allocation Matrix: ")
    #print(allocation)

    obj_func = lpSum(allocation * I)
    #print(obj_func)
    prob += obj_func
    #print(prob)

   # for j in range(number):
   #     # print(lpSum(allocation[i][j] * L[i][j] for i in range(edge)) <= 1)
   #     prob += lpSum(allocation[i][j] * L[i][j] for i in range(edge)) <= 1, "C2 Constraints " + str(j)

    for j in range(number):
        #print(lpSum(allocation[i][j] for i in range(edge)) == 1)
        prob += lpSum(allocation[i][j] for i in range(edge)) == 1, "C3 Constraints " + str(j)

    # Write the problem as an LP file
    prob.writeLP("test1.lp")

    # Solve the problem using the default solver
    prob.solve()
    # Use prob.solve(GLPK()) instead to choose GLPK as the solver
    # Use GLPK(msg = 0) to suppress GLPK messages
    # If GLPK is not in your path and you lack the pulpGLPK module,
    # replace GLPK() with GLPK("/path/")
    # Where /path/ is the path to glpsol (excluding glpsol itself).
    # If you want to use CPLEX, use CPLEX() instead of GLPK().
    # If you want to use XPRESS, use XPRESS() instead of GLPK().
    # If you want to use COIN, use COIN() instead of GLPK(). In this last case,
    # two paths may be provided (one to clp, one to cbc).

    # Print the status of the solved LP
    print("Status:", LpStatus[prob.status])

    # Print the value of the variables at the optimum
    o = [[0 for j in range(edge)] for i in range(number)]
    for v in prob.variables():
        print(v.name, "=", v.varValue)
        i = int(v.name[2]) - 1
        j = int(v.name[3:6]) - 1
        o[j][i] = min(1, max(0, v.varValue))
    print(o)
    return o

if __name__ == "__main__":
    L = [[2.3316333288558404, 1.9819143052529382, 1.5350137250485818, 1.243212453478997, 2.4714646333954,
          1.7957634614583466, 2.782343180693874, 2.31602228734435, 2.6402928081232684, 2.2320111984782387,
          1.5678468018269114, 1.8718301949668334, 2.7694475941014636, 2.4876095171235737, 2.5260527435088975,
          1.9945804793950317],
         [1.7934494933926353, 1.5928738429025837, 1.1017139288326705, 0.9355559970195282, 1.8266003042803762,
          1.2221230724812457, 1.9629785487820806, 1.6647067997498226, 1.973941510316473, 1.8412642996879225,
          1.093791792048602, 1.3796939380852902, 2.0759150257347376, 1.7860698605202383, 1.7482151865467792,
          1.411044526049479],
         [1.3594353227656755, 1.2974001450989117, 0.9655329378405695, 0.7582001446962319, 1.5082821266099726,
          0.9997013053274385, 1.7478741876936652, 1.440192870150443, 1.5593090891961257, 1.4720784863926677,
          0.8984618391852176, 1.2337513823210122, 1.635756323371184, 1.484782851158434, 1.4890069122885579,
          1.2495417381447211],
         [1.4342737765531914, 1.1515354562511364, 0.8848306867916458, 0.7686151506462267, 1.6033450231420465,
          1.0706779165410918, 1.4775106613223858, 1.4638679440792066, 1.701302247789273, 1.5449089597646088,
          0.8683047220574854, 1.3520883205062248, 1.7367682745383244, 1.3056663400030852, 1.479940622794727,
          1.156289006527176]]
    I = [[0.09872167800038834, 0.12581298274641273, 0.5465843892865577, 0.5482688201555546, 0.18526994198280766,
          0.7987936260374053, -0.15230081195475975, -0.016081105037240917, -0.14994249737001364, -0.0762573186052542,
          0.9245933038978191, -0.01842270569881599, 0.00891997308211634, 0.07950465634982273, 0.025016119008501647,
          0.3770935131930684],
         [0.44839407627026473, 0.6590548358529906, 0.43603516234574136, 0.6846610730133846, 0.16795282489140506,
          0.2486774646727039, -0.48965850507956854, -0.18009697020949367, -0.07929710345007268, 0.6254303732307964,
          0.5053725302068994, -0.028871806656382448, 0.2812011950474558, -0.007621999770043519, -0.5176352938230488,
          0.09846526726917482],
         [-0.5095429958006377, 0.13922578515927198, 0.44587472559343266, 0.3112244363465446, -0.30039660913453115,
          -0.04641251593744633, -0.33385412010301163, -0.2670785584498967, -0.7277233697324594, -0.05030630614064324,
          0.17302970912101334, 0.03453976491699007, -0.7042914724401828, -0.4297240629234731, -0.6982894515448754,
          0.1584547744886946],
         [1.262279825807455, 0.7311276615243094, 1.2898108397768042, 1.402475363572545, 1.718706936226523,
          1.0428732419857816, 0.33337448243631007, 1.3230412035242627, 1.0993174164005668, 1.4432154923923284,
          1.143942663165833, 1.4763340036814285, 1.9514611588783533, 0.7494633795345444, 0.37033576736839313,
          1.0731162377119305]]
    Y = [[0.06889698077824538, 0.057218827074079714, 0.045901437832428636, 0.03683252298133978, 0.07111020171678847,
          0.046589865836611684, 0.08280386564020686, 0.06808283476167458, 0.07616847814325604, 0.06379580117462878,
          0.04358082891409125, 0.05428254557921998, 0.08280386564020686, 0.07616847814325604, 0.0677022292131272,
          0.0580612365708387],
         [0.06889698077824538, 0.057218827074079714, 0.045901437832428636, 0.03683252298133977, 0.07111020171678846,
          0.046589865836611684, 0.08280386564020686, 0.06808283476167458, 0.07616847814325604, 0.06379580117462878,
          0.04358082891409125, 0.05428254557921997, 0.08280386564020686, 0.07616847814325604, 0.0677022292131272,
          0.05806123657083869],
         [0.0688969807782454, 0.05721882707407973, 0.04590143783242864, 0.03683252298133978, 0.07111020171678847,
          0.046589865836611684, 0.08280386564020688, 0.06808283476167458, 0.07616847814325603, 0.0637958011746288,
          0.04358082891409125, 0.054282545579219986, 0.08280386564020688, 0.07616847814325603, 0.0677022292131272,
          0.0580612365708387],
         [0.06889698077824538, 0.05721882707407972, 0.045901437832428636, 0.03683252298133978, 0.07111020171678847,
          0.046589865836611684, 0.08280386564020688, 0.06808283476167457, 0.07616847814325604, 0.0637958011746288,
          0.04358082891409125, 0.05428254557921997, 0.08280386564020688, 0.07616847814325604, 0.0677022292131272,
          0.0580612365708387]]
    solver(L, I, Y, 16, 4)